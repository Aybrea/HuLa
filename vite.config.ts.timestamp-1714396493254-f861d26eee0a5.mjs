// vite.config.ts
import { defineConfig, loadEnv } from "file:///D:/JAVA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E9%A1%B9%E7%9B%AE/HuLa-IM-Tauri/node_modules/.pnpm/vite@5.2.9_@types+node@20.11.7_sass@1.71.1_terser@5.28.1/node_modules/vite/dist/node/index.js";
import vue from "file:///D:/JAVA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E9%A1%B9%E7%9B%AE/HuLa-IM-Tauri/node_modules/.pnpm/@vitejs+plugin-vue@5.0.4_vite@5.2.9_@types+node@20.11.7_sass@1.71.1_terser@5.28.1__vue@3.4.23_typescript@5.4.3_/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import AutoImport from "file:///D:/JAVA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E9%A1%B9%E7%9B%AE/HuLa-IM-Tauri/node_modules/.pnpm/unplugin-auto-import@0.17.5_@vueuse+core@10.8.0_vue@3.4.23_typescript@5.4.3___rollup@4.14.3/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///D:/JAVA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E9%A1%B9%E7%9B%AE/HuLa-IM-Tauri/node_modules/.pnpm/unplugin-vue-components@0.26.0_@babel+parser@7.24.4_rollup@4.14.3_vue@3.4.23_typescript@5.4.3_/node_modules/unplugin-vue-components/dist/vite.js";
import { NaiveUiResolver } from "file:///D:/JAVA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E9%A1%B9%E7%9B%AE/HuLa-IM-Tauri/node_modules/.pnpm/unplugin-vue-components@0.26.0_@babel+parser@7.24.4_rollup@4.14.3_vue@3.4.23_typescript@5.4.3_/node_modules/unplugin-vue-components/dist/resolvers.js";

// build/config/getPath.ts
import path from "path";
var __vite_injected_original_dirname = "D:\\JAVA\u5B66\u4E60\u8DEF\u7EBF\\\u4E8C\u624B\u4EA4\u6613\u9879\u76EE\\HuLa-IM-Tauri\\build\\config";
var getRootPath = () => {
  return path.resolve(__vite_injected_original_dirname, process.cwd());
};
var getSrcPath = (mainName = "src") => {
  const rootPath = getRootPath();
  return `${rootPath}/${mainName}`;
};

// vite.config.ts
import vueJsx from "file:///D:/JAVA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E9%A1%B9%E7%9B%AE/HuLa-IM-Tauri/node_modules/.pnpm/@vitejs+plugin-vue-jsx@3.1.0_vite@5.2.9_@types+node@20.11.7_sass@1.71.1_terser@5.28.1__vue@3.4.23_typescript@5.4.3_/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import unocss from "file:///D:/JAVA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E9%A1%B9%E7%9B%AE/HuLa-IM-Tauri/node_modules/.pnpm/@unocss+vite@0.59.4_rollup@4.14.3_vite@5.2.9_@types+node@20.11.7_sass@1.71.1_terser@5.28.1_/node_modules/@unocss/vite/dist/index.mjs";
import terser from "file:///D:/JAVA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E9%A1%B9%E7%9B%AE/HuLa-IM-Tauri/node_modules/.pnpm/@rollup+plugin-terser@0.4.4_rollup@4.14.3/node_modules/@rollup/plugin-terser/dist/es/index.js";

// package.json
var package_default = {
  name: "hula-im-tauri",
  private: true,
  type: "module",
  version: "v1.5.0",
  license: "Apache-2.0",
  engines: {
    node: ">=18.12.0",
    pnpm: ">=8.10.0"
  },
  repository: {
    url: "https://github.com/nongyehong/HuLa-IM-Tauri.git"
  },
  author: {
    name: "nongyehong",
    email: "2439646234@qq.com",
    url: "https://github.com/nongyehong/HuLa-IM-Tauri"
  },
  "lint-staged": {
    "*.{js,jsx,vue,ts,tsx}": [
      "oxlint src",
      "prettier --config .prettierrc --write",
      "eslint src"
    ]
  },
  scripts: {
    dev: "vite --mode dev",
    prod: "vite --mode prod",
    build: "vue-tsc --noEmit && vite build --mode dev",
    preview: "vite preview",
    "tauri:dev": "tauri dev",
    "tauri:build": "tauri build",
    "tauri:icon": "tauri icon public/logo.png",
    preinstall: "npx only-allow pnpm",
    commit: "git add . && git-cz",
    changelog: "conventional-changelog -p angular -i CHANGELOG.md -s -r 0",
    "lint:staged": "lint-staged",
    prepare: "husky install"
  },
  dependencies: {
    "@tauri-apps/api": "^1.5.4",
    axios: "^1.6.8",
    colorthief: "^2.4.0",
    dayjs: "^1.11.10",
    "lodash-es": "^4.17.21",
    mitt: "^3.0.1",
    "naive-ui": "^2.38.1",
    pinia: "^2.1.7",
    "pinia-plugin-persistedstate": "^3.2.1",
    "pinia-shared-state": "^0.5.1",
    vue: "^3.4.23",
    "vue-draggable-plus": "^0.4.0",
    "vue-router": "^4.3.0"
  },
  devDependencies: {
    "@babel/eslint-parser": "^7.23.3",
    "@commitlint/cli": "^19.2.2",
    "@commitlint/config-conventional": "^19.2.2",
    "@rollup/plugin-terser": "^0.4.4",
    "@tauri-apps/cli": "^1.5.11",
    "@types/lodash-es": "^4.17.12",
    "@types/node": "^20.10.4",
    "@typescript-eslint/eslint-plugin": "7.1.0",
    "@typescript-eslint/parser": "^7.1.0",
    "@unocss/preset-uno": "^0.59.4",
    "@unocss/reset": "^0.59.4",
    "@unocss/transformer-directives": "^0.59.4",
    "@unocss/transformer-variant-group": "^0.59.4",
    "@unocss/vite": "^0.59.4",
    "@vitejs/plugin-vue": "^5.0.4",
    "@vitejs/plugin-vue-jsx": "^3.1.0",
    "@vueuse/core": "^10.8.0",
    commitizen: "^4.3.0",
    "conventional-changelog": "^5.1.0",
    "conventional-changelog-cli": "^4.1.0",
    "cz-git": "^1.9.1",
    eslint: "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-prettier": "^5.0.1",
    "eslint-plugin-vue": "^9.19.2",
    husky: "^9.0.11",
    "lint-staged": "^15.2.0",
    oxlint: "^0.2.4",
    prettier: "^3.2.5",
    sass: "^1.71.1",
    "sass-loader": "^14.1.1",
    typescript: "^5.4.3",
    "unplugin-auto-import": "^0.17.2",
    "unplugin-vue-components": "^0.26.0",
    vite: "5.2.9",
    "vue-tsc": "^2.0.6"
  },
  config: {
    commitizen: {
      path: "node_modules/cz-git"
    }
  }
};

// build/config/console.ts
var atStartup = (env, mode) => {
  return () => {
    if (mode === "dev") {
      console.log(
        `  \u{1F340} ${"\x1B[32m"}${"\x1B[38;2;19;152;127m"}${env.VITE_APP_NAME} ${"\x1B[0m"}${"\x1B[90m"}${package_default.version}${"\x1B[0m"}`
      );
      console.log(
        `  ${"\x1B[38;2;26;178;146m"}${"\x1B[1m"}${"\u279C"}${"\x1B[0m"}  ${"\u5F53\u524D\u73AF\u5883: "}${"\x1B[38;2;215;95;135m"}${mode}${"\x1B[0m"}`
      );
      console.log(
        `  ${"\x1B[38;2;26;178;146m"}${"\x1B[1m"}${"\u279C"}${"\x1B[0m"}  ${"\x1B[38;2;0;215;175m"}${"\x1B[1m"}${"Vue"}${"\x1B[0m"}: ${"\x1B[90m"}${package_default.dependencies.vue}${"\x1B[0m"} ${"\x1B[38;2;95;215;255m"}${"\x1B[1m"}${"Vite"}${"\x1B[0m"}: ${"\x1B[90m"}${package_default.devDependencies.vite}${"\x1B[0m"} ${"\x1B[38;5;33m"}${"\x1B[1m"}${"Node.js"}${"\x1B[0m"}: ${"\x1B[90m"}${process.version}${"\x1B[0m"}`
      );
      console.log(
        `  ${"\x1B[38;2;26;178;146m"}${"\x1B[1m"}${"\u279C"}${"\x1B[0m"}  \u5F53\u524D ${"\x1B[38;2;215;135;0m"}${"\x1B[1m"}Tauri${"\x1B[0m"} \u7248\u672C: `,
        `${"\x1B[90m"}${package_default.dependencies["@tauri-apps/api"]}${"\x1B[0m"}`
      );
      console.log(
        `  ${"\x1B[38;2;26;178;146m"}${"\x1B[1m"}${"\x1B[2m"}${"\u279C"}${"\x1B[0m"}  \u540E\u7AEF\u670D\u52A1\u5730\u5740: ${"\x1B[38;2;95;175;255m"}\u5F85\u5F00\u53D1\u4E2D -->${"\x1B[0m"}`
      );
      console.log(
        `  ${"\x1B[38;2;26;178;146m"}${"\x1B[1m"}${"\x1B[2m"}${"\u279C"}${"\x1B[0m"}  \u9879\u76EE\u5730\u5740: ${package_default.author.url}`
      );
    }
  };
};

// vite.config.ts
var vite_config_default = defineConfig(({ mode }) => {
  const config = loadEnv(mode, process.cwd());
  return {
    resolve: {
      alias: {
        // 配置路径别名@
        "@": getSrcPath(),
        // 配置路径别名~(根路径)
        "~": getRootPath()
      }
    },
    css: {
      preprocessorOptions: {
        scss: {
          additionalData: '@import "./src/styles/scss/global/variable.scss";'
          // 加载全局样式，使用scss特性
        }
      }
    },
    define: {
      // enable hydration mismatch details in production build 3.4新增水化不匹配的警告
      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: "true"
    },
    plugins: [
      /**! 启动时候打印项目信息(不需要可关闭)  */
      atStartup(config, mode),
      /**
       * !实验性功能
       * 开启defineProps解构语法
       * */
      vue({ script: { propsDestructure: true } }),
      vueJsx(),
      // 开启jsx功能
      unocss(),
      // 开启unocss
      AutoImport({
        imports: ["vue", { "naive-ui": ["useDialog", "useMessage", "useNotification", "useLoadingBar"] }],
        dts: "src/typings/auto-imports.d.ts"
      }),
      /**自动导入组件，但是不会自动导入jsx和tsx*/
      Components({
        dirs: ["src/components/**"],
        // 设置需要扫描的目录
        resolvers: [NaiveUiResolver()],
        dts: "src/typings/components.d.ts"
      }),
      /** 压缩代码 */
      terser({
        format: {
          comments: false
          // 移除所有注释
        },
        compress: {
          drop_console: true,
          // 移除 console.log
          drop_debugger: true
          // 移除 debugger
        }
      })
    ],
    build: {
      cssCodeSplit: true,
      // 启用 CSS 代码拆分
      minify: "terser",
      // 指定使用哪种混淆器
      // chunk 大小警告的限制(kb)
      chunkSizeWarningLimit: 1200,
      // 分包配置
      rollupOptions: {
        output: {
          chunkFileNames: "static/js/[name]-[hash].js",
          // 引入文件名的名称
          entryFileNames: "static/js/[name]-[hash].js",
          // 包的入口文件名称
          assetFileNames: "static/[ext]/[name]-[hash].[ext]",
          // 资源文件像 字体，图片等
          // 最小化拆分包
          manualChunks(id) {
            if (id.includes("node_modules")) {
              return "invariable";
            }
          }
        }
      }
    },
    // Vite options tailored for Tauri development and only applied in `tauri dev` or `tauri build`
    //
    // 1. prevent vite from obscuring rust errors
    clearScreen: false,
    // 2. tauri expects a fixed port, fail if that port is not available
    server: {
      host: "0.0.0.0",
      port: 6130,
      strictPort: true,
      watch: {
        // 3. tell vite to ignore watching `src-tauri`
        ignored: ["**/src-tauri/**"]
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
